# CI configuration.

stages:
  - docker
  - test
  - ui
  - build
  - publish


# Build and publish utility Docker container. This is only rebuilt whenever
# the Dockerfile changes, or once weekly triggered by a scheduled pipeline run.
# This utility Docker container contains all dependencies (ffmpeg, gtk4, rust)
# needed to test and build Cindy.
docker:
  stage: docker
  image: docker
  services:
    - docker:dind
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE/builder"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE/builder"
  interruptible: true
  only:
    refs:
      - main
    changes:
      - Dockerfile

# Run unit tests on project. These should be fairly exhaustive.
test:
  stage: test
  image: "$CI_REGISTRY_IMAGE/builder"
  interruptible: true
  script:
    - cargo test

# Build UI. This needs to be done first as the frontend is embedded into the binary.
ui:
  stage: ui
  image: "$CI_REGISTRY_IMAGE/builder"
  script:
    - cd ui && trunk build --release
  interruptible: true
  artifacts:
    paths:
      - ui/dist

# Build Cindy for Linux amd64
build-amd64:
  stage: build
  dependencies:
    - ui
  image: "$CI_REGISTRY_IMAGE/builder"
  script:
    - cargo build --release
  interruptible: true
  artifacts:
    paths:
      - target/release/cindy

# Publish all build binaries for Cindy on GitLab Pages.
pages:
  stage: publish
  image: alpine
  dependencies:
    - build-amd64
  script:
    - mkdir -p public
    - mv target/release/cindy public/cindy-linux-amd64
  artifacts:
    paths:
      - public

