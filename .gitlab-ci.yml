# CI configuration.

stages:
  - docker
  - test
  - ui
  - build
  - publish

default:
  # cancel running pipelines when new commit is pushed
  interruptible: true

# Build and publish utility Docker container. This is only rebuilt whenever the
# Dockerfile changes, or once weekly triggered by a scheduled pipeline run.
# This utility Docker container contains all dependencies (ffmpeg, sqlite, rust)
# needed to test and build Cindy.
backend-builder:
  stage: docker
  image: docker
  services:
    - docker:dind
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE/backend-builder" -f docker/backend.dockerfile
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE/backend-builder"
  only:
    refs:
      - main
    changes:
      - docker/backend.dockerfile

# Build and publish utility Docker container. This is only rebuilt whenever the
# Dockerfile changes, or once weekly triggered by a scheduled pipeline run.
# This utility Docker container contains all dependencies (trunk, wasm32 target)
# needed to test and build Cindy frontend.
frontend-builder:
  stage: docker
  image: docker
  services:
    - docker:dind
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE/frontend-builder" -f docker/frontend.dockerfile
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE/frontend-builder"
  only:
    refs:
      - main
    changes:
      - docker/frontend.dockerfile

# Build and publish utility Docker container. This is only rebuilt whenever the
# Dockerfile changes, or once weekly triggered by a scheduled pipeline run.
# This utility Docker container contains all dependencies (trunk, wasm32 target)
# needed to test and build Cindy website.
website-builder:
  stage: docker
  image: docker
  services:
    - docker:dind
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE/website-builder" -f docker/website.dockerfile
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker push "$CI_REGISTRY_IMAGE/website-builder"
  only:
    refs:
      - main
    changes:
      - docker/website.dockerfile

# Run unit tests on project. These should be fairly exhaustive.
# FIXME: we create the ui/dist folder and place a mock index.html in there.
# the unit tests assume that the frontend exists, but we have not compiled it yet.
test:
  stage: test
  image: "$CI_REGISTRY_IMAGE/backend-builder"
  before_script:
    - mkdir -p ui/dist
    - touch ui/dist/index.html
  script:
    - cargo test --all

# Build UI. This needs to be done first as the frontend is embedded into the binary.
ui:
  stage: ui
  image: "$CI_REGISTRY_IMAGE/frontend-builder"
  script:
    - cd ui && trunk build --release
  artifacts:
    paths:
      - ui/dist

# Build Cindy for Linux amd64
build-amd64:
  stage: build
  image: "$CI_REGISTRY_IMAGE/backend-builder"
  dependencies:
    - ui
  script:
    - cargo build --release
  artifacts:
    paths:
      - target/release/cindy

website:
  stage: build
  image: "$CI_REGISTRY_IMAGE/website-builder"
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - cd website && zola build
  artifacts:
    paths:
      - website/public

# Determine test coverage
coverage:
  stage: build
  image: "$CI_REGISTRY_IMAGE/backend-builder"
  dependencies:
    - ui
  script:
    - cargo llvm-cov --html --all
  artifacts:
    paths:
      - target/llvm-cov

# Build rustdoc
rustdoc:
  stage: build
  image: "$CI_REGISTRY_IMAGE/backend-builder"
  dependencies:
    - ui
  script:
    - cargo doc --all --all-features
  artifacts:
    paths:
      - target/doc

# Publish all build binaries for Cindy on GitLab Pages.
pages:
  stage: publish
  image: alpine
  dependencies:
    - build-amd64
    - website
    - coverage
    - rustdoc
  script:
    - mv website/public public
    - mv target/release/cindy public/releases/cindy-linux-amd64
    - mv target/llvm-cov/html public/coverage
    - mv target/doc public/rustdoc
  artifacts:
    paths:
      - public
  only:
    - main

